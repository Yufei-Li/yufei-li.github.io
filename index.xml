<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>李雨菲的博客 Li Yufei&#39;s Blog</title>
    <link>https://yufei-li.github.io/</link>
    <description>Recent content on 李雨菲的博客 Li Yufei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>商业转载请联系作者获得授权，非商业转载请注明出处。</copyright>
    <lastBuildDate>Sun, 10 Sep 2023 13:48:43 -0400</lastBuildDate>
    
	<atom:link href="https://yufei-li.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What Shaped Our World?</title>
      <link>https://yufei-li.github.io/post/worldpoliticsinterestsinteractionsinstitutions/</link>
      <pubDate>Sun, 10 Sep 2023 13:48:43 -0400</pubDate>
      
      <guid>https://yufei-li.github.io/post/worldpoliticsinterestsinteractionsinstitutions/</guid>
      <description>国际关系的出现:重商主义时代 世界作为一个有意义的政治和经济单位是在1500年后才出现的。 1492年之后，一波又一波的探险家、征服者、商人和移</description>
    </item>
    
    <item>
      <title>International Relations：One World, Many Theories</title>
      <link>https://yufei-li.github.io/post/internationalrelationsoneworldmanytheories/</link>
      <pubDate>Sun, 10 Sep 2023 12:01:19 -0400</pubDate>
      
      <guid>https://yufei-li.github.io/post/internationalrelationsoneworldmanytheories/</guid>
      <description>政策制定者和实践者和国际事务的学术研究之间是有差别的。在现实中，制定外交政策的人经常对学术理论家不屑一顾。虽然考虑到抽象的理论世界以及现实的</description>
    </item>
    
    <item>
      <title>The Modern Politics of the Taiping Heavenly Kingdom</title>
      <link>https://yufei-li.github.io/post/themodernpoliticsofthetaipingheavenlykingdom/</link>
      <pubDate>Sat, 09 Sep 2023 15:42:16 -0400</pubDate>
      
      <guid>https://yufei-li.github.io/post/themodernpoliticsofthetaipingheavenlykingdom/</guid>
      <description>对于太平天国的历史研究随着政治的变化而变化 1949年革命后：强调太平天国和共产主义一样是基于农民的方面 共产主义激进时期：强调太平天国平均主义</description>
    </item>
    
    <item>
      <title>State, Markets and Capitalism, East and West</title>
      <link>https://yufei-li.github.io/post/statemarketandcapitalism_eastandwest/</link>
      <pubDate>Wed, 06 Sep 2023 08:56:50 -0400</pubDate>
      
      <guid>https://yufei-li.github.io/post/statemarketandcapitalism_eastandwest/</guid>
      <description>Brzezinski – 中国会谨慎地扩大中国的势力，避免与美国起冲突。 基于政治现实（核武器的诞生）出发，过去的理论是可以被修正的。 Mearsheimer — 根据理论，中国将会和美国起</description>
    </item>
    
    <item>
      <title>美国人的历史(1)</title>
      <link>https://yufei-li.github.io/post/americanhistory1/</link>
      <pubDate>Mon, 28 Aug 2023 22:57:38 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/americanhistory1/</guid>
      <description>村落组成的大陆 最早的美洲定居者 印第安人 亚洲迁徙假说：通过白令路桥 农业以墨西哥的高原为中心，其中最重要的作物是大豆和南瓜，此外还包括番茄、辣椒</description>
    </item>
    
    <item>
      <title>《论爱欲》</title>
      <link>https://yufei-li.github.io/post/libido/</link>
      <pubDate>Thu, 01 Jun 2023 09:10:44 -0400</pubDate>
      
      <guid>https://yufei-li.github.io/post/libido/</guid>
      <description>这本书大概是在两个月前看完的，因为期末比较忙+忙完之后报复性休息了很久，所以拖的时间有点长。 这本书讲述了不同种类的爱，比如真理之爱，神圣之爱</description>
    </item>
    
    <item>
      <title>《宇宙奥德赛：漫步太阳系》</title>
      <link>https://yufei-li.github.io/post/spaceodyseey_solarsystem/</link>
      <pubDate>Sun, 12 Feb 2023 11:12:48 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/spaceodyseey_solarsystem/</guid>
      <description>问题列表 地球 人类如何确定地球的形状和大小？ 人类如何测量地球的质量？ 人类如何测出地球的年龄？ 为什么地球能成为生命绿洲？ 月球 为什么月球总是一面朝</description>
    </item>
    
    <item>
      <title>《安静——内向性格的竞争力》</title>
      <link>https://yufei-li.github.io/post/quiet/</link>
      <pubDate>Thu, 09 Feb 2023 18:52:46 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/quiet/</guid>
      <description>看完了《安静内向性格的竞争力》这本书。这本书虽然有267页，但是是畅销书的写作风格，读起来很快。知道这本书是从goodreads的评分推荐榜</description>
    </item>
    
    <item>
      <title>《心经解读》</title>
      <link>https://yufei-li.github.io/post/theheartofsutra/</link>
      <pubDate>Wed, 28 Dec 2022 11:12:48 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/theheartofsutra/</guid>
      <description>最近在温哥华看完了Bill Porter的《心经解读》，看到一半才意识到是个美国作家。对于梵文还有中国佛教历史的认知特别全面和深刻。好厉害。 书</description>
    </item>
    
    <item>
      <title>《苏菲的世界》</title>
      <link>https://yufei-li.github.io/post/sophiesworld/</link>
      <pubDate>Fri, 23 Dec 2022 19:10:48 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/sophiesworld/</guid>
      <description>虽然之前多多少少有看一些法哲学、政治哲学等相关的书，但一直没看过这种概括性的哲学史。《苏菲的世界》是一本不错的科普读物，不晦涩，除了哲学之外</description>
    </item>
    
    <item>
      <title>《醒来的女性》</title>
      <link>https://yufei-li.github.io/post/thewomenrooms/</link>
      <pubDate>Sun, 18 Dec 2022 11:12:48 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/thewomenrooms/</guid>
      <description>已经很久没有在自己的博客里更新读书笔记了。这篇读书笔记在豆瓣一直被审核发不出来，即使被自我阉割到没有什么内容了，依然要被审查。“希腊语中的‘</description>
    </item>
    
    <item>
      <title>《生命的学问》</title>
      <link>https://yufei-li.github.io/post/knowledgeoflife/</link>
      <pubDate>Wed, 12 Oct 2022 11:12:48 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/knowledgeoflife/</guid>
      <description>一开始知道这本书是在豆瓣另一本书的书评下。抱着一些有点理想主义的大学生的迷茫，看看能不能在这本书中找到一些什么，一些算是勇气或者信心之类的东</description>
    </item>
    
    <item>
      <title>《李尔王》</title>
      <link>https://yufei-li.github.io/post/kinglear/</link>
      <pubDate>Thu, 14 Apr 2022 15:01:26 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/kinglear/</guid>
      <description>故事梗概 主要情节： 这个故事讲述了年事已高的国王李尔王退位之时，召集三位女儿，分封国土。他将自己的国土分成三份，但是他提了一个问题，“告诉我，</description>
    </item>
    
    <item>
      <title>《如何像人类学家一样思考》</title>
      <link>https://yufei-li.github.io/post/thinkasanthropologist/</link>
      <pubDate>Sat, 15 Jan 2022 21:03:56 +0000</pubDate>
      
      <guid>https://yufei-li.github.io/post/thinkasanthropologist/</guid>
      <description>简介 在过去的一百多年里，人类学家走遍了世界各地，从津巴布韦的城市到英格兰的郊区，从北京到巴塞罗那，他们揭示了种种惊人的事实、模式、偏好，以及</description>
    </item>
    
    <item>
      <title>java笔记(2)</title>
      <link>https://yufei-li.github.io/post/javanote2/</link>
      <pubDate>Thu, 14 Jan 2021 14:50:15 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/javanote2/</guid>
      <description>class &amp;amp; object define class 1 2 3 4 5 6 [修饰符] class 类名 { 零个到多个构造器定义 零个到多个成员变量 零个到多个方法 } 修饰符：public、final、abstra</description>
    </item>
    
    <item>
      <title>java笔记(1)</title>
      <link>https://yufei-li.github.io/post/javanote1/</link>
      <pubDate>Wed, 13 Jan 2021 12:24:42 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/javanote1/</guid>
      <description>hello world 1 2 3 4 5 public class practice1 { public static void main(String[] args){ System.out.println(&amp;#34;hello world&amp;#34;); // print hello world } } run java program 1 2 javac hello.java // produce a java class program java hello // java + the name of java class program the java program must contain public static void main(String[] args) to run if there is a public class in the program, the</description>
    </item>
    
    <item>
      <title>Networking Intro</title>
      <link>https://yufei-li.github.io/post/networking_intro/</link>
      <pubDate>Thu, 03 Dec 2020 16:38:58 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/networking_intro/</guid>
      <description>build a simple python chat server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # server import socket port = 9876 sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((&amp;#34;&amp;#34;, port)) sock.listen(1) newsock, addr = sock.accept() while (True): encoded_text = newsock.recv(1024) text = encoded_text.decode() print(&amp;#34;&amp;gt;&amp;gt;&amp;#34;, text, &amp;#34;&amp;lt;&amp;lt;&amp;#34;) 1 2 3 4 5 6 7 8 9 10 11 12 # client import socket port = 9876 ip</description>
    </item>
    
    <item>
      <title>Functors, Applicative Functors and Monoids</title>
      <link>https://yufei-li.github.io/post/haskell10/</link>
      <pubDate>Sun, 29 Nov 2020 21:09:10 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell10/</guid>
      <description>functors revison Functors are things that can be map, like lists, Maybe, trees. We can discribe these types by Functor typeclass. This typeclass only have one method: fmap, fmap :: (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b. It says: give me a function that takes an a and returns a b and a box with an a (or several of them) inside it and I&amp;rsquo;ll give you a box with a b (or several of them) inside it.</description>
    </item>
    
    <item>
      <title>Functionally Solving Problems</title>
      <link>https://yufei-li.github.io/post/haskell9/</link>
      <pubDate>Sun, 29 Nov 2020 16:42:48 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell9/</guid>
      <description>In this chapter, we probably won&amp;rsquo;t be introducing any new concepts, we&amp;rsquo;ll just be flexing our newly acquired Haskell muscles and practicing our coding skills.
Reverse Polish notation calculator Usually when we write mathematical expressions in school, we write them in an infix manner. For instance, we write 10 - (4 + 3) * 2.Reverse Polish notation is another way of writing down mathematical expressions. Initially it looks a bit weird, but it&amp;rsquo;s actually pretty easy to understand and use because there&amp;rsquo;s no need for parentheses and it&amp;rsquo;s very easy to punch into a calculator.</description>
    </item>
    
    <item>
      <title>specification</title>
      <link>https://yufei-li.github.io/post/specification/</link>
      <pubDate>Fri, 27 Nov 2020 13:09:11 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/specification/</guid>
      <description>catogories of specification requirements specification  specify what piece of software is supposed to do before writing software a collabration of software producer and software user  formal specification  mathmatical expression of what software is going to do and how will it work  interface specification  is related to api , how to use a library  protocal specification  make sure the work between two programmers can interpretted correctly  semantics and syntax  to achieve interoperability, we need to specify the semantics and syntax  semantics   explain what do the message mean</description>
    </item>
    
    <item>
      <title>Input and Output</title>
      <link>https://yufei-li.github.io/post/haskell8/</link>
      <pubDate>Thu, 26 Nov 2020 23:56:24 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell8/</guid>
      <description>I/O action 1 2 3 4  ghci&amp;gt; :t putStrLn putStrLn :: String -&amp;gt; IO () ghci&amp;gt; :t putStrLn &amp;#34;hello, world&amp;#34; putStrLn &amp;#34;hello, world&amp;#34; :: IO ()   We can read the type of putStrLn like this: putStrLn takes a string and returns an I/O action that has a result type of ()(i.e. the empty tuple, also know as unit). Becuase print a string has no meaning to return a value, so we return a () to represent</description>
    </item>
    
    <item>
      <title>Making Own Types and Typeclasses</title>
      <link>https://yufei-li.github.io/post/haskell7/</link>
      <pubDate>Sat, 21 Nov 2020 01:34:54 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell7/</guid>
      <description>Algebraic data types intro One way to make type is to use the data keyword to define a type. Let&amp;rsquo;s see how the Bool type is defined in the standard library: data Bool = False|True. We can read as: the Bool type can have a value of True or False. Both the type name and the value constructors have to be capital cased.
  example: build Shape type in Haskell:data Shape = Circle Float Float Float | Rectangle Float Float Float Float , The Circle value constructor has three fields, which take floats.</description>
    </item>
    
    <item>
      <title>Module</title>
      <link>https://yufei-li.github.io/post/haskell6/</link>
      <pubDate>Thu, 19 Nov 2020 17:12:47 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell6/</guid>
      <description>Loading modules All the functions, types and typeclasses that we&amp;rsquo;ve dealt with so far were part of the Prelude module, which is imported by default.
The syntax for importing modules in a Haskell script is import &amp;lt;module name&amp;gt;
nub is a function defined in Data.List that takes a list and remove duplicate elements from the list
1 2 3 4  import Data.List numUniques :: (Eq a) =&amp;gt; [a] -&amp;gt; Int numUniques = length .</description>
    </item>
    
    <item>
      <title>High Order Functions</title>
      <link>https://yufei-li.github.io/post/haskell5/</link>
      <pubDate>Thu, 19 Nov 2020 14:01:45 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell5/</guid>
      <description>Haskell functions can take functions as parameters and return functions as return values. A function that does either of those is called a higher order function.
curried functions Every function in Haskell officially only takes one parameter. All the functions that accepted several parameters so far have been curried functions. For example, max function. Doing max 4 5 first creates a function that takes a parameter and returns either 4 or that parameter, depending on which is bigger.</description>
    </item>
    
    <item>
      <title>Recursion</title>
      <link>https://yufei-li.github.io/post/haskell4/</link>
      <pubDate>Wed, 18 Nov 2020 22:46:50 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell4/</guid>
      <description>Recursion is important to Haskell because unlike imperative languages, you do computations in Haskell by declaring what something is instead of declaring how you get it. That&amp;rsquo;s why there are no while loops or for loops in Haskell and instead we many times have to use recursion to declare what something is.
maximum 1 2 3 4 5  maximum&amp;#39; :: (Ord a) =&amp;gt; [a] -&amp;gt; a maximum&amp;#39; [] = error &amp;#34;empty list&amp;#34; -- crash condition maximum&amp;#39; [x] = x -- edge condition maximum&amp;#39; (x:xs) = max x maxnum where maxnum = maximum&amp;#39; xs   replicate 1 2 3 4 5  replicate&amp;#39; :: (Integral a) =&amp;gt; a -&amp;gt; b -&amp;gt; [b] replicate&amp;#39; a b | a &amp;lt; 0 = error &amp;#34;error:negative int&amp;#34; | a == 0 = [] | a &amp;gt; 0 = b : replicate&amp;#39; (a-1) b   Num is not a subclass of Ord.</description>
    </item>
    
    <item>
      <title>Syntax in Functions</title>
      <link>https://yufei-li.github.io/post/haskell3/</link>
      <pubDate>Wed, 18 Nov 2020 17:19:53 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell3/</guid>
      <description>pattern matching 1 2 3 4 5 6 7 8 9 10  lucky7 :: (Integral a) =&amp;gt; a -&amp;gt; String lucky7 7 = &amp;#34;lucky 7&amp;#34; lucky7 x = &amp;#34;not 7&amp;#34; lucky7 7 --&amp;#34;lucy 7&amp;#34; -- if lucky7 x at front of lucky7 7 lucky7 x = &amp;#34;not 7&amp;#34; lucky7 :: (Integral a) =&amp;gt; a -&amp;gt; String lucky7 7 = &amp;#34;lucky 7&amp;#34; lucky7 7 --&amp;#34;not 7&amp;#34;   because lucky7 x will match with lucky7 7 and lucky7 7 = &amp;quot;lucky 7&amp;quot; won&amp;rsquo;t be checked.</description>
    </item>
    
    <item>
      <title>Type &amp; Typeclasses</title>
      <link>https://yufei-li.github.io/post/haskell2/</link>
      <pubDate>Wed, 18 Nov 2020 16:03:56 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell2/</guid>
      <description>types in haskell :t can tell us the type of some expressions
1 2 3 4 5  :t &amp;#39;a&amp;#39; -- &amp;#39;a&amp;#39; :: Char :t True -- True :: Bool  :t &amp;#34;Haskell&amp;#34; -- &amp;#34;Haskell&amp;#34; :: [Char]  :t (True, 4) -- (True, 4) :: (Bool, Int)  :t 4 == 5 -- 4 == 5 :: Bool    :: means &amp;ldquo;has type of&amp;rdquo; . [Char] means a list of characters, [Char] is equal to String, using String is more clear and easy to read.</description>
    </item>
    
    <item>
      <title>python file operation(1)</title>
      <link>https://yufei-li.github.io/post/python_file_operation1/</link>
      <pubDate>Tue, 17 Nov 2020 23:50:10 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/python_file_operation1/</guid>
      <description>read as text mode 1 2 3 4 5 6 7 8 9  def test_write(): file = open(&amp;#34;store.txt&amp;#34;, &amp;#34;wt&amp;#34;) file.write(&amp;#34;Hello\n&amp;#34;) file.write(&amp;#34;World\n&amp;#34;) file.close() with open(&amp;#34;store.txt&amp;#34;, &amp;#34;rt&amp;#34;) as file2: # no need for file.close() for line in file2: print(line)   read as byte mode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  def test_nums_texts(): file = open(&amp;#34;nums.txt&amp;#34;, &amp;#34;wt&amp;#34;) # write as text 1000000 1000001 1000002 1000003 1000004 .</description>
    </item>
    
    <item>
      <title>Haskell Basic Knowledge</title>
      <link>https://yufei-li.github.io/post/haskell1/</link>
      <pubDate>Mon, 16 Nov 2020 19:32:02 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell1/</guid>
      <description>Boolean Algebra &amp;amp; Equality 1 2 3 4 5 6 7 8  True &amp;amp;&amp;amp; False --False True || False --True not True --False 21 == 21 --True &amp;#34;Hello&amp;#34; == &amp;#34;Hello&amp;#34; --True &amp;#34;Hello&amp;#34; == 123 --Error 5 /= 7 --True, not equal to   functions succ  returns following item in an enumeration  1 2 3 4  succ 5 --6 succ &amp;#39;a&amp;#39; --b succ 60 * 3 --183 -&amp;gt; 61 * 3 succ (60 * 3) --181 -&amp;gt; 180 + 1   div  returns how many times the first number can be divided by the second one  1 2 3  div 92 7 97 `div` 7 -- 13   write functions  The string before :: is function name, after :: is parameter list, including parameter and return value, connected by -&amp;gt;, the last value is return value.</description>
    </item>
    
    <item>
      <title>c语言笔记(6)</title>
      <link>https://yufei-li.github.io/post/c6/</link>
      <pubDate>Fri, 13 Nov 2020 14:54:26 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/c6/</guid>
      <description>Function-like macros define macros that work in a similar way like a function call. This is known as function-like macros. in SQUARE(x), there must be no gap between SQUARE and (x) the function-like macros simply do replacement, so in the macro definition, ((x) * (x)) the brackets are needed, otherwise (x * x) = (5 + 1 * 5 + 1) = (5 + 5 + 1) = 11 1</description>
    </item>
    
    <item>
      <title>localtime function</title>
      <link>https://yufei-li.github.io/post/c_localtime/</link>
      <pubDate>Thu, 12 Nov 2020 22:47:44 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/c_localtime/</guid>
      <description>tm structure in c 1 2 3 4 5 6 7 8 9 10 11 struct tm { int tm_sec; /* seconds, range 0 to 59 */ int tm_min; /* minutes, range 0 to 59 */ int tm_hour; /* hours, range 0 to 23 */ int tm_mday; /* day of the month, range 1 to 31 */ int tm_mon; /* month, range 0 to 11 */ int tm_year; /* The</description>
    </item>
    
    <item>
      <title>c语言笔记(5)</title>
      <link>https://yufei-li.github.io/post/c5/</link>
      <pubDate>Wed, 11 Nov 2020 21:36:24 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/c5/</guid>
      <description>structures Arrays allow to define type of variables that can hold several data items of the same kind. Similarly structure is another user defined data type available in C that allows to combine data items of different kinds. the element in the structure can be another structure Usually, the first letter of the name of the stucture is capital letter 1 2 3 4 5 6 7 struct [structure tag]</description>
    </item>
    
    <item>
      <title>Hash Tables</title>
      <link>https://yufei-li.github.io/post/hash_tables/</link>
      <pubDate>Sat, 31 Oct 2020 14:42:29 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/hash_tables/</guid>
      <description>dictionary A dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 yufei = {&amp;#34;Name&amp;#34;: &amp;#34;Yufei&amp;#34;, &amp;#34;Age&amp;#34;: 18, &amp;#34;Major&amp;#34;: &amp;#34;cs&amp;#34; } li</description>
    </item>
    
    <item>
      <title>c语言笔记(4)</title>
      <link>https://yufei-li.github.io/post/c4/</link>
      <pubDate>Wed, 28 Oct 2020 13:12:10 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/c4/</guid>
      <description>global variable &amp;amp; local variable Local variable : Variables that are declared inside a function or block are called local variables. They can be used only by statements that are inside that function or block of code. global variable:Global variables are defined outside a function, usually on top of the program. Global variables hold their values throughout the lifetime of your program and they can be accessed inside any of</description>
    </item>
    
    <item>
      <title>tree</title>
      <link>https://yufei-li.github.io/post/tree/</link>
      <pubDate>Mon, 26 Oct 2020 14:29:38 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/tree/</guid>
      <description>tree A tree whose elements have at most 2 children is called a binary tree. Since each element in a binary tree can have only 2 children, we typically name them the left and right child. insert and find 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description>
    </item>
    
    <item>
      <title>queue</title>
      <link>https://yufei-li.github.io/post/queue/</link>
      <pubDate>Thu, 22 Oct 2020 18:52:46 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/queue/</guid>
      <description>node use node to make a linked list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Node(): def __init__(self, value): self.value = value self.next = None def append(self, node): if self.next is not None: raise (ValueError(&amp;#34;next node is not None&amp;#34;)) self.next = node</description>
    </item>
    
    <item>
      <title>c exercise c语言练习笔记</title>
      <link>https://yufei-li.github.io/post/c_exercise1/</link>
      <pubDate>Wed, 21 Oct 2020 20:09:57 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/c_exercise1/</guid>
      <description>verbalize a number; combine two string; reverse a integer; check a valid integer and determine if it is a prime number; check if a integer is prime; clear keyboard buffer; verbalize a number Write a program that reads an integer between 0 and 999 and &amp;ldquo;verbalises it&amp;rdquo;. For example, if the program is given 123 it would display &amp;ldquo;one hundred and twenty three&amp;rdquo;. 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>merge sort</title>
      <link>https://yufei-li.github.io/post/mergesort/</link>
      <pubDate>Tue, 20 Oct 2020 12:55:33 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/mergesort/</guid>
      <description>algorithm Conceptually, a merge sort works as follows: Divide the unsorted list into n sublists, each containing one element (a list of one element is considered sorted). Repeatedly merge sublists to produce new sorted sublists until there is only one sublist remaining. This will be the sorted list example use merge sort to sort the list, according to integer, string, or length of string 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>Arduino笔记</title>
      <link>https://yufei-li.github.io/post/arduino_note1/</link>
      <pubDate>Mon, 19 Oct 2020 15:43:14 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/arduino_note1/</guid>
      <description>blink 1 2 3 4 5 6 7 8 9 10 11 12 13 // the setup function runs once when you press reset or power the board void setup() { // initialize digital pin LED_BUILTIN as an output. pinMode(LED_BUILTIN, OUTPUT); } // the loop function runs over and over again forever void loop() { digitalWrite(LED_BUILTIN, HIGH); // turn the LED on (HIGH is the voltage level) delay(3000); // wait</description>
    </item>
    
    <item>
      <title>python note(1)</title>
      <link>https://yufei-li.github.io/post/python_note_1/</link>
      <pubDate>Thu, 08 Oct 2020 13:58:15 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/python_note_1/</guid>
      <description>unit test function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  def gcd(a, b): # a b must be positive if not ( a&amp;gt;0 and b&amp;gt;0 ): raise ArithmeticError(&amp;#34;%s, %smust be positive integer&amp;#34;%(a, b)) while not a == b: if a &amp;gt; b: a = a - b else: b = b - a return a def test_gcd(): ax = -42 bx = 30 result = gcd(ax, bx) assert (result == 6) test_gcd()   a unit test for gcd function</description>
    </item>
    
    <item>
      <title>c语言笔记(3)</title>
      <link>https://yufei-li.github.io/post/c3/</link>
      <pubDate>Sat, 05 Sep 2020 15:27:14 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/c3/</guid>
      <description>左值和右值 左值：标识的应该是个存储位置，内存中的位置，左值可以是个变量名，或者是个表达式，但表达式必须表示的是个内存位置 右值：就是个值，变量</description>
    </item>
    
    <item>
      <title>c语言笔记(2)</title>
      <link>https://yufei-li.github.io/post/c2/</link>
      <pubDate>Sat, 05 Sep 2020 15:05:15 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/c2/</guid>
      <description>switch语句 switch语法 1 2 3 4 5 6 7 8 9 10 switch(expression){ case constant-expression : statement(s); break; /* 可选的 */ case constant-expression : statement(s); break; /* 可选的 */ /* 可以有任意数量的 case 语句 */ default : /* 可选的 */ statement(s); } switch</description>
    </item>
    
    <item>
      <title>c语言笔记(1)</title>
      <link>https://yufei-li.github.io/post/c1/</link>
      <pubDate>Sun, 30 Aug 2020 15:40:21 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/c1/</guid>
      <description>变量 变量名不能以数字开头，否则会报错 error:invalid suffix &amp;quot;_abc&amp;quot; on integer constant 常量 转义字符\n占一个字节的空间 “abc”由&amp;rsquo;a&amp;rsquo;,&amp;lsquo;b</description>
    </item>
    
    <item>
      <title>python多线程笔记</title>
      <link>https://yufei-li.github.io/post/python_thread/</link>
      <pubDate>Thu, 20 Aug 2020 15:54:22 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/python_thread/</guid>
      <description>多线程介绍 多线程类似于同时执行多个不同程序，多线程运行有如下优点： 使用线程可以把占据长时间的程序中的任务放到后台去处理 用户界面可以更加吸引人</description>
    </item>
    
    <item>
      <title>Github</title>
      <link>https://yufei-li.github.io/post/github_upload/</link>
      <pubDate>Wed, 19 Aug 2020 11:33:51 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/github_upload/</guid>
      <description>在github上建立相应的repository 在终端进入想要上传的文件夹，git init 配置 ssh , 输入：ssh-keygen -t rsa -C &amp;ldquo;yufeili_cloris@163.com&amp;rdquo; (登录githu</description>
    </item>
    
    <item>
      <title>Pytorch基础</title>
      <link>https://yufei-li.github.io/post/pytorch_basic/</link>
      <pubDate>Mon, 03 Aug 2020 08:51:09 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/pytorch_basic/</guid>
      <description>PyTorch是一个开源的python机器学习库，基于Torch，用于自然语言处理等应用程序。PyTorch的前身是Torch，其底层和To</description>
    </item>
    
    <item>
      <title>最大似然估计(MLE)和最大后验概率估计(MAP)</title>
      <link>https://yufei-li.github.io/post/mlemap/</link>
      <pubDate>Mon, 03 Aug 2020 00:42:48 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/mlemap/</guid>
      <description>似然函数 对于这个函数： P(x|θ) 输入有两个：x表示某一个具体的数据；θ表示模型的参数。 如果θ是已知确定的，x是变量，这个函数叫做概率函数(</description>
    </item>
    
    <item>
      <title>贝叶斯定理Bayes&#39; Theorem</title>
      <link>https://yufei-li.github.io/post/bayes_theorem/</link>
      <pubDate>Sun, 02 Aug 2020 23:38:34 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/bayes_theorem/</guid>
      <description>贝叶斯定理公式 公式的详细解释 P(H|E)是后验概率，P(H)是先验概率，P(E|H)/P(E)是可能性函数 我们先根据以往的经验预估一个&amp;qu</description>
    </item>
    
    <item>
      <title>Numpy</title>
      <link>https://yufei-li.github.io/post/numpy/</link>
      <pubDate>Wed, 22 Jul 2020 13:24:02 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/numpy/</guid>
      <description>numpy是一个在python中做科学运算的基础库，重在数值运算，也是大部分python科学计算库的基础库，多用于在大型、多维数组上执行数值</description>
    </item>
    
    <item>
      <title>Matplotlib</title>
      <link>https://yufei-li.github.io/post/matplotlib/</link>
      <pubDate>Mon, 20 Jul 2020 23:02:31 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/matplotlib/</guid>
      <description>matplotlib是基于Python语言的开源项目，旨在为Python提供一个数据绘图包,一般用于数据可视化 折线图 基础绘图 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>Re</title>
      <link>https://yufei-li.github.io/post/re/</link>
      <pubDate>Mon, 13 Jul 2020 13:37:51 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/re/</guid>
      <description>在python爬虫中主要使用search、findall和sub方法 正则表达式的表示类型： raw string类型（原生字符串类型）：re库采用r</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://yufei-li.github.io/post/regular_expression/</link>
      <pubDate>Mon, 13 Jul 2020 10:30:55 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/regular_expression/</guid>
      <description>元字符 常用正则表达式 校验数字的表达式 数字：^[0-9]*$ n位的数字：^\d{n}$ 至少n位的数字：^\d{n,}$ m-n位的数字：^\d{</description>
    </item>
    
    <item>
      <title>BeautifulSoup</title>
      <link>https://yufei-li.github.io/post/beautifulsoup/</link>
      <pubDate>Sun, 12 Jul 2020 19:23:19 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/beautifulsoup/</guid>
      <description>BeautifulSoup将复杂的文档转换成一个树形结构,所有的对象可以归为四种类型：Tag, NavigableString, BeautifulSoup, Comment。对于爬虫来说，主要使用其中</description>
    </item>
    
    <item>
      <title>Urllib笔记</title>
      <link>https://yufei-li.github.io/post/urllib/</link>
      <pubDate>Sun, 12 Jul 2020 16:06:35 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/urllib/</guid>
      <description>urllib包含四个模块： request，是最基本的http请求模块，可以用来模拟发送请求 error，异常处理模块，如果出现请求错误，可以进</description>
    </item>
    
    <item>
      <title>python爬虫入门笔记</title>
      <link>https://yufei-li.github.io/post/web_spider/</link>
      <pubDate>Fri, 10 Jul 2020 18:59:04 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/web_spider/</guid>
      <description>准备工作 寻找url规律 在网页进入开发者模式，左上角有一个小箭头，点击之后移动鼠标，右边就会自动显示鼠标指向的信息在源代码中的位置 编码规范： p</description>
    </item>
    
    <item>
      <title>git</title>
      <link>https://yufei-li.github.io/post/git_note/</link>
      <pubDate>Fri, 10 Jul 2020 14:50:29 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/git_note/</guid>
      <description>git结构 git命令行操作 本地库初始化 初始化：git init 在文件夹下面单击右键，选择git Bash here,再使用git init建造仓库。建立了一个名</description>
    </item>
    
    <item>
      <title>《黑天鹅》</title>
      <link>https://yufei-li.github.io/post/the-black-swan/</link>
      <pubDate>Thu, 09 Jul 2020 11:12:48 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/the-black-swan/</guid>
      <description>摘抄 黑天鹅的逻辑是，你不知道的事比你知道的事更有意义，因为许多黑天鹅事件正是在不可预知的情况下发生和加剧的 我们的世界是由极端、未知和非常不可</description>
    </item>
    
  </channel>
</rss>