<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell on 李雨菲的博客 Li Yufei&#39;s Blog</title>
    <link>https://yufei-li.github.io/categories/haskell/</link>
    <description>Recent content in Haskell on 李雨菲的博客 Li Yufei&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>商业转载请联系作者获得授权，非商业转载请注明出处。</copyright>
    <lastBuildDate>Thu, 26 Nov 2020 23:56:24 +0800</lastBuildDate>
    
	<atom:link href="https://yufei-li.github.io/categories/haskell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Input and Output</title>
      <link>https://yufei-li.github.io/post/haskell8/</link>
      <pubDate>Thu, 26 Nov 2020 23:56:24 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell8/</guid>
      <description>I/O action 1 2 3 4  ghci&amp;gt; :t putStrLn putStrLn :: String -&amp;gt; IO () ghci&amp;gt; :t putStrLn &amp;#34;hello, world&amp;#34; putStrLn &amp;#34;hello, world&amp;#34; :: IO ()   We can read the type of putStrLn like this: putStrLn takes a string and returns an I/O action that has a result type of ()(i.e. the empty tuple, also know as unit). Becuase print a string has no meaning to return a value, so we return a () to represent</description>
    </item>
    
    <item>
      <title>Making Own Types and Typeclasses</title>
      <link>https://yufei-li.github.io/post/haskell7/</link>
      <pubDate>Sat, 21 Nov 2020 01:34:54 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell7/</guid>
      <description>Algebraic data types intro One way to make type is to use the data keyword to define a type. Let&amp;rsquo;s see how the Bool type is defined in the standard library: data Bool = False|True. We can read as: the Bool type can have a value of True or False. Both the type name and the value constructors have to be capital cased.
  example: build Shape type in Haskell:data Shape = Circle Float Float Float | Rectangle Float Float Float Float , The Circle value constructor has three fields, which take floats.</description>
    </item>
    
    <item>
      <title>Module</title>
      <link>https://yufei-li.github.io/post/haskell6/</link>
      <pubDate>Thu, 19 Nov 2020 17:12:47 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell6/</guid>
      <description>Loading modules All the functions, types and typeclasses that we&amp;rsquo;ve dealt with so far were part of the Prelude module, which is imported by default.
The syntax for importing modules in a Haskell script is import &amp;lt;module name&amp;gt;
nub is a function defined in Data.List that takes a list and remove duplicate elements from the list
1 2 3 4  import Data.List numUniques :: (Eq a) =&amp;gt; [a] -&amp;gt; Int numUniques = length .</description>
    </item>
    
    <item>
      <title>High Order Functions</title>
      <link>https://yufei-li.github.io/post/haskell5/</link>
      <pubDate>Thu, 19 Nov 2020 14:01:45 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell5/</guid>
      <description>Haskell functions can take functions as parameters and return functions as return values. A function that does either of those is called a higher order function.
curried functions Every function in Haskell officially only takes one parameter. All the functions that accepted several parameters so far have been curried functions. For example, max function. Doing max 4 5 first creates a function that takes a parameter and returns either 4 or that parameter, depending on which is bigger.</description>
    </item>
    
    <item>
      <title>Recursion</title>
      <link>https://yufei-li.github.io/post/haskell4/</link>
      <pubDate>Wed, 18 Nov 2020 22:46:50 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell4/</guid>
      <description>Recursion is important to Haskell because unlike imperative languages, you do computations in Haskell by declaring what something is instead of declaring how you get it. That&amp;rsquo;s why there are no while loops or for loops in Haskell and instead we many times have to use recursion to declare what something is.
maximum 1 2 3 4 5  maximum&amp;#39; :: (Ord a) =&amp;gt; [a] -&amp;gt; a maximum&amp;#39; [] = error &amp;#34;empty list&amp;#34; -- crash condition maximum&amp;#39; [x] = x -- edge condition maximum&amp;#39; (x:xs) = max x maxnum where maxnum = maximum&amp;#39; xs   replicate 1 2 3 4 5  replicate&amp;#39; :: (Integral a) =&amp;gt; a -&amp;gt; b -&amp;gt; [b] replicate&amp;#39; a b | a &amp;lt; 0 = error &amp;#34;error:negative int&amp;#34; | a == 0 = [] | a &amp;gt; 0 = b : replicate&amp;#39; (a-1) b   Num is not a subclass of Ord.</description>
    </item>
    
    <item>
      <title>Syntax in Functions</title>
      <link>https://yufei-li.github.io/post/haskell3/</link>
      <pubDate>Wed, 18 Nov 2020 17:19:53 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell3/</guid>
      <description>pattern matching 1 2 3 4 5 6 7 8 9 10  lucky7 :: (Integral a) =&amp;gt; a -&amp;gt; String lucky7 7 = &amp;#34;lucky 7&amp;#34; lucky7 x = &amp;#34;not 7&amp;#34; lucky7 7 --&amp;#34;lucy 7&amp;#34; -- if lucky7 x at front of lucky7 7 lucky7 x = &amp;#34;not 7&amp;#34; lucky7 :: (Integral a) =&amp;gt; a -&amp;gt; String lucky7 7 = &amp;#34;lucky 7&amp;#34; lucky7 7 --&amp;#34;not 7&amp;#34;   because lucky7 x will match with lucky7 7 and lucky7 7 = &amp;quot;lucky 7&amp;quot; won&amp;rsquo;t be checked.</description>
    </item>
    
    <item>
      <title>Type &amp; Typeclasses</title>
      <link>https://yufei-li.github.io/post/haskell2/</link>
      <pubDate>Wed, 18 Nov 2020 16:03:56 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell2/</guid>
      <description>types in haskell :t can tell us the type of some expressions
1 2 3 4 5  :t &amp;#39;a&amp;#39; -- &amp;#39;a&amp;#39; :: Char :t True -- True :: Bool  :t &amp;#34;Haskell&amp;#34; -- &amp;#34;Haskell&amp;#34; :: [Char]  :t (True, 4) -- (True, 4) :: (Bool, Int)  :t 4 == 5 -- 4 == 5 :: Bool    :: means &amp;ldquo;has type of&amp;rdquo; . [Char] means a list of characters, [Char] is equal to String, using String is more clear and easy to read.</description>
    </item>
    
    <item>
      <title>Haskell Basic Knowledge</title>
      <link>https://yufei-li.github.io/post/haskell1/</link>
      <pubDate>Mon, 16 Nov 2020 19:32:02 +0800</pubDate>
      
      <guid>https://yufei-li.github.io/post/haskell1/</guid>
      <description>Boolean Algebra &amp;amp; Equality 1 2 3 4 5 6 7 8  True &amp;amp;&amp;amp; False --False True || False --True not True --False 21 == 21 --True &amp;#34;Hello&amp;#34; == &amp;#34;Hello&amp;#34; --True &amp;#34;Hello&amp;#34; == 123 --Error 5 /= 7 --True, not equal to   functions succ  returns following item in an enumeration  1 2 3 4  succ 5 --6 succ &amp;#39;a&amp;#39; --b succ 60 * 3 --183 -&amp;gt; 61 * 3 succ (60 * 3) --181 -&amp;gt; 180 + 1   div  returns how many times the first number can be divided by the second one  1 2 3  div 92 7 97 `div` 7 -- 13   write functions  The string before :: is function name, after :: is parameter list, including parameter and return value, connected by -&amp;gt;, the last value is return value.</description>
    </item>
    
  </channel>
</rss>